---
globs: *.ts,*.tsx
description: Core data models and TypeScript interfaces for the Jira clone application
---

# Jira Clone Data Models

## Core Entity Models

### Issue Management

```tsx
interface Issue {
  id: string;
  key: string; // Unique project key + number (e.g., "PROJ-123")
  projectId: string;
  project: Project;

  // Basic Properties
  title: string;
  description?: string;
  type: IssueType;
  status: IssueStatus;
  priority: IssuePriority;

  // People
  reporter: User;
  assignee?: User;
  watchers: User[];

  // Organization
  epic?: Issue; // Parent epic
  parentIssue?: Issue; // For sub-tasks
  subIssues: Issue[];
  linkedIssues: IssueLink[];

  // Categorization
  labels: string[];
  components: Component[];
  fixVersions: Version[];
  affectsVersions: Version[];

  // Time Tracking
  originalEstimate?: number; // in minutes
  remainingEstimate?: number;
  timeSpent?: number;
  workLogs: WorkLog[];

  // Dates
  createdAt: Date;
  updatedAt: Date;
  resolvedAt?: Date;
  dueDate?: Date;

  // Sprint Management
  sprintId?: string;
  sprint?: Sprint;
  storyPoints?: number;
  rank: string; // For ordering/ranking

  // Attachments & Comments
  attachments: Attachment[];
  comments: Comment[];

  // Resolution
  resolution?: IssueResolution;
  resolutionDate?: Date;

  // Custom Fields
  customFields: Record<string, any>;

  // Security
  securityLevel?: SecurityLevel;
}

interface IssueType {
  id: string;
  name: string;
  description?: string;
  icon: string; // Icon identifier
  color: string;
  isSubtask: boolean;
  level: number; // 0=Epic, 1=Story, 2=Task, 3=Sub-task
  workflow: Workflow;
  fields: IssueTypeField[];
  projectId?: string; // null for global types
}

interface IssueStatus {
  id: string;
  name: string;
  description?: string;
  category: 'todo' | 'in_progress' | 'done';
  color: string;
  order: number;
  workflowId: string;
}

interface IssuePriority {
  id: string;
  name: string;
  description?: string;
  color: string;
  icon: string;
  level: number; // 1=Highest, 5=Lowest
}
```

### Project Management

```tsx
interface Project {
  id: string;
  name: string;
  key: string; // Unique project identifier (e.g., "PROJ")
  description?: string;
  avatar?: string;

  // Project Configuration
  type: ProjectType;
  template: ProjectTemplate;
  category: ProjectCategory;

  // Leadership & Team
  lead: User;
  defaultAssignee?: User;
  members: ProjectMember[];
  teams: Team[];

  // Workflow & Configuration
  issueTypes: IssueType[];
  workflows: Workflow[];
  fields: CustomField[];
  components: Component[];
  versions: Version[];

  // Settings
  settings: ProjectSettings;
  permissions: ProjectPermissionScheme;
  notificationScheme: NotificationScheme;

  // Metadata
  isArchived: boolean;
  visibility: 'public' | 'private';
  createdAt: Date;
  updatedAt: Date;
  archivedAt?: Date;

  // Statistics
  issueCount: number;
  activeSprintCount: number;
  teamMemberCount: number;
}

interface ProjectMember {
  id: string;
  userId: string;
  user: User;
  projectId: string;
  role: ProjectRole;
  joinedAt: Date;
  isActive: boolean;
}

interface ProjectSettings {
  // Time Tracking
  timeTrackingEnabled: boolean;
  defaultTimeUnit: 'minutes' | 'hours' | 'days';
  workingDaysPerWeek: number;
  workingHoursPerDay: number;

  // Issue Settings
  allowSubtasks: boolean;
  allowAttachments: boolean;
  maxAttachmentSize: number; // in MB

  // Agile Settings
  estimationField?: string;
  velocityField?: string;
  sprintLength: number; // in days

  // Automation
  automationEnabled: boolean;
  webhooksEnabled: boolean;
}
```

### User Management

```tsx
interface User {
  id: string;
  email: string;
  username: string;

  // Profile
  firstName: string;
  lastName: string;
  displayName: string;
  avatar?: string;
  bio?: string;

  // Location & Preferences
  timezone: string;
  locale: string;
  location?: string;

  // Account Status
  isActive: boolean;
  isEmailVerified: boolean;
  isSystemAdmin: boolean;

  // Timestamps
  createdAt: Date;
  updatedAt: Date;
  lastLoginAt?: Date;

  // Preferences
  preferences: UserPreferences;
  notifications: NotificationPreferences;

  // Security
  security: UserSecurity;
}

interface UserPreferences {
  theme: 'light' | 'dark' | 'system';
  language: string;
  dateFormat: string;
  timeFormat: '12h' | '24h';

  // Dashboard
  defaultDashboard?: string;
  dashboardLayout: DashboardLayout;

  // Issue Views
  issueViewType: 'list' | 'detail';
  issuesPerPage: number;
  defaultIssueFilter?: string;

  // Board Settings
  boardViewType: 'scrum' | 'kanban';
  swimlaneBy: 'none' | 'assignee' | 'epic' | 'priority';
  showSubtasks: boolean;
  showDone: boolean;
  daysSinceLastActivity: number;
}

interface Team {
  id: string;
  name: string;
  description?: string;
  avatar?: string;

  // Leadership
  leadId: string;
  lead: User;

  // Members
  members: TeamMember[];

  // Project Associations
  projects: Project[];

  // Settings
  settings: TeamSettings;

  // Metadata
  createdAt: Date;
  updatedAt: Date;
  isActive: boolean;
}

interface TeamMember {
  id: string;
  userId: string;
  user: User;
  teamId: string;
  role: TeamRole;
  joinedAt: Date;
  leftAt?: Date;
  isActive: boolean;
}
```

### Sprint & Agile

```tsx
interface Sprint {
  id: string;
  name: string;
  goal?: string;
  projectId: string;
  project: Project;

  // Timeline
  startDate?: Date;
  endDate?: Date;
  state: 'future' | 'active' | 'closed';

  // Content
  issues: Issue[];

  // Capacity & Planning
  capacity?: number; // Total team capacity in hours
  commitment?: number; // Committed story points

  // Metadata
  createdAt: Date;
  createdBy: User;
  startedAt?: Date;
  startedBy?: User;
  completedAt?: Date;
  completedBy?: User;

  // Metrics (calculated)
  totalIssues: number;
  completedIssues: number;
  totalStoryPoints: number;
  completedStoryPoints: number;

  // Reports
  burndownData: BurndownPoint[];
  velocityData: VelocityPoint[];
}

interface Board {
  id: string;
  name: string;
  type: 'scrum' | 'kanban' | 'simple';
  projectId: string;

  // Configuration
  columns: BoardColumn[];
  swimlanes: Swimlane[];
  quickFilters: QuickFilter[];

  // Settings
  settings: BoardSettings;

  // Metadata
  createdAt: Date;
  createdBy: User;
  isFavorite: boolean;
}

interface BoardColumn {
  id: string;
  name: string;
  statusIds: string[]; // Maps to issue statuses
  position: number;
  wipLimit?: number; // Work In Progress limit
  color?: string;
  isCollapsed: boolean;
}
```

### Comments & Attachments

```tsx
interface Comment {
  id: string;
  issueId: string;
  issue: Issue;

  // Content
  content: string; // Rich text/markdown
  contentType: 'text' | 'markdown';

  // Author
  authorId: string;
  author: User;

  // Threading
  parentId?: string; // For nested comments
  replies: Comment[];

  // Interactions
  mentions: User[];
  reactions: Reaction[];

  // Metadata
  createdAt: Date;
  updatedAt: Date;
  editedAt?: Date;
  isDeleted: boolean;

  // Visibility
  visibilityType: 'all' | 'project_members' | 'internal' | 'custom';
  visibleToRoles?: string[];
}

interface Attachment {
  id: string;
  issueId: string;
  filename: string;
  originalFilename: string;
  mimeType: string;
  size: number; // in bytes

  // Storage
  storagePath: string;
  thumbnailPath?: string;

  // Upload Info
  uploadedBy: User;
  uploadedAt: Date;

  // Metadata
  description?: string;
  isImage: boolean;
  isDocument: boolean;
  isArchive: boolean;

  // Security
  scanStatus: 'pending' | 'clean' | 'infected' | 'error';
  downloadCount: number;
}

interface WorkLog {
  id: string;
  issueId: string;

  // Time Information
  timeSpent: number; // in minutes
  timeSpentString: string; // human readable (e.g., "2h 30m")
  startedAt: Date;

  // Work Description
  description?: string;
  workType?: WorkType;

  // Author
  authorId: string;
  author: User;

  // Metadata
  createdAt: Date;
  updatedAt: Date;

  // Billing
  isBillable: boolean;
  billableHours?: number;
  hourlyRate?: number;
}
```

### Configuration & Metadata

```tsx
interface Component {
  id: string;
  name: string;
  description?: string;
  projectId: string;

  // Leadership
  leadId?: string;
  lead?: User;

  // Settings
  isArchived: boolean;

  // Usage Stats
  issueCount: number;
  lastUsed?: Date;
}

interface Version {
  id: string;
  name: string;
  description?: string;
  projectId: string;

  // Timeline
  releaseDate?: Date;
  startDate?: Date;

  // Status
  isReleased: boolean;
  isArchived: boolean;

  // Usage Stats
  issueCount: number;
  resolvedIssueCount: number;
}

interface CustomField {
  id: string;
  name: string;
  description?: string;
  key: string; // Unique identifier

  // Configuration
  type: CustomFieldType;
  isRequired: boolean;
  isGlobal: boolean; // vs project-specific

  // Validation
  validation?: FieldValidation;
  defaultValue?: any;

  // Display
  renderer: FieldRenderer;

  // Context
  projectIds: string[]; // Empty array = global
  issueTypeIds: string[]; // Empty array = all types

  // Metadata
  createdAt: Date;
  createdBy: User;
  order: number;
}

interface CustomFieldType {
  id: string;
  name: string;
  category: 'text' | 'number' | 'date' | 'select' | 'multi_select' | 'user' | 'boolean';
  configuration: Record<string, any>;
}
```

### Permissions & Security

```tsx
interface Permission {
  id: string;
  name: string;
  description: string;
  resource: string; // 'issue', 'project', 'user', etc.
  action: string; // 'create', 'read', 'update', 'delete', etc.
  category: 'project' | 'issue' | 'admin' | 'user';
}

interface Role {
  id: string;
  name: string;
  description?: string;
  permissions: Permission[];

  // Scope
  isGlobal: boolean;
  projectId?: string;

  // Metadata
  isDefault: boolean;
  isSystemRole: boolean;
  createdAt: Date;
}

interface ProjectPermissionScheme {
  id: string;
  name: string;
  description?: string;

  // Role Assignments
  roleAssignments: RoleAssignment[];

  // Project Association
  projectIds: string[];

  // Metadata
  isDefault: boolean;
  createdAt: Date;
  createdBy: User;
}

interface RoleAssignment {
  roleId: string;
  role: Role;
  assigneeType: 'user' | 'group' | 'project_role';
  assigneeId: string;
  conditions?: AssignmentCondition[];
}
```

## Utility Types

### Common Enums

```tsx
type ProjectType = 'software' | 'service_desk' | 'business';
type IssueResolution =
  | 'fixed'
  | 'wont_fix'
  | 'duplicate'
  | 'incomplete'
  | 'cannot_reproduce'
  | 'done';
type NotificationType = 'email' | 'in_app' | 'slack' | 'webhook';
type AuditAction = 'create' | 'update' | 'delete' | 'view' | 'transition' | 'comment';
```

### Response Types

```tsx
interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
  errors?: ValidationError[];
  pagination?: PaginationInfo;
}

interface PaginationInfo {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
  hasNext: boolean;
  hasPrev: boolean;
}

interface ValidationError {
  field: string;
  message: string;
  code: string;
}
```

## Type Guards & Utilities

```tsx
// Type Guards
const isIssueType = (value: any): value is IssueType => {
  return value && typeof value.id === 'string' && typeof value.name === 'string';
};

const isUser = (value: any): value is User => {
  return value && typeof value.id === 'string' && typeof value.email === 'string';
};

// Utility Types
type IssueCreateData = Omit<
  Issue,
  'id' | 'key' | 'createdAt' | 'updatedAt' | 'comments' | 'attachments'
>;
type IssueUpdateData = Partial<
  Pick<Issue, 'title' | 'description' | 'assignee' | 'priority' | 'labels'>
>;
type ProjectCreateData = Omit<Project, 'id' | 'createdAt' | 'updatedAt' | 'issueCount' | 'members'>;

// Search & Filter Types
interface IssueFilters {
  projectIds?: string[];
  assigneeIds?: string[];
  reporterIds?: string[];
  statusIds?: string[];
  typeIds?: string[];
  priorityIds?: string[];
  labels?: string[];
  components?: string[];
  versions?: string[];
  createdAfter?: Date;
  createdBefore?: Date;
  updatedAfter?: Date;
  updatedBefore?: Date;
  textSearch?: string;
}

interface SortOptions {
  field: string;
  direction: 'asc' | 'desc';
}
```
